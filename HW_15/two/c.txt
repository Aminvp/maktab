هنگام استفاده از multi-table inheritance یک جدول پایگاه داده جدید برای هر زیر کلاس از یک مدل ایجاد می شود.
این معمولاً رفتار مطلوب است، زیرا زیر کلاس به مکانی برای ذخیره فیلدهای داده اضافی که در کلاس پایه وجود ندارد نیاز دارد.با این حال، گاهی اوقات شما فقط می خواهید رفتار پایتون یک مدل را تغییر دهید - شاید برای تغییر مدیر پیش فرض یا اضافه کردن یک روش جدید.
این همان چیزی است که وراثت مدل پروکسی برای آن است: ایجاد یک پروکسی برای مدل اصلی.می‌توانید نمونه‌های مدل پراکسی را ایجاد، حذف و به‌روزرسانی کنید و همه داده‌ها به‌گونه‌ای ذخیره می‌شوند که گویی از مدل اصلی (غیر پروکسی) استفاده می‌کنید.تفاوت این است که می‌توانید مواردی مانند سفارش مدل پیش‌فرض یا مدیر پیش‌فرض در پروکسی را بدون نیاز به تغییر نسخه اصلی تغییر دهید.
مدل های پروکسی مانند مدل های معمولی اعلام می شوند.شما با تنظیم ویژگی پروکسی به جنگو می گویید که یک مدل پراکسی است از کلاس متا به True.
برای مثال، فرض کنید می خواهید متدی را به مدل Person اضافه کنید.
from django.db import models

class Person(models.Model):
    first_name = models.CharField(max_length=30)
    last_name = models.CharField(max_length=30)

class MyPerson(Person):
    class Meta:
        proxy = True

    def do_something(self):
        # ...
        pass
کلاس MyPerson روی همان جدول پایگاه داده والد خود کلاس Person عمل می کند.به خصوص،هر نمونه جدید از Person از طریق MyPerson نیز قابل دسترسی خواهد بود و بالعکس.
p = Person.objects.create(first_name="foobar")
MyPerson.objects.get(first_name="foobar")
همچنین می توانید از یک مدل پراکسی برای تعریف یک ترتیب پیش فرض متفاوت در یک مدل استفاده کنید.ممکن است همیشه نخواهید سفارش دهید مدل Person, اما به طور منظم توسط ویژگی last_name وقتی از پروکسی استفاده می کنید:
class OrderedPerson(Person):
    class Meta:
        ordering = ["last_name"]
        proxy = True

 














